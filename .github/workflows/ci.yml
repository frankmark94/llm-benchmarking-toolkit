name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 scripts/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Test script imports
      run: |
        cd scripts
        python -c "import run_prompts_openai, run_prompts_local, compare_outputs, utils; print('All imports successful')"
    
    - name: Validate prompt datasets
      run: |
        python -c "
        import json
        from pathlib import Path
        
        prompt_files = ['instruction.json', 'reasoning.json', 'creative.json', 'coding.json']
        for file in prompt_files:
            path = Path(f'data/prompts/{file}')
            data = json.load(open(path))
            assert len(data) == 12, f'{file} should have 12 prompts, got {len(data)}'
            for prompt in data:
                assert 'id' in prompt and 'content' in prompt, f'Invalid prompt format in {file}'
        print('All prompt datasets validated successfully')
        "
    
    - name: Check notebooks are valid
      run: |
        pip install nbformat
        python -c "
        import nbformat
        from pathlib import Path
        
        notebooks = ['notebooks/output_analysis.ipynb', 'notebooks/performance_charts.ipynb']
        for nb_path in notebooks:
            if Path(nb_path).exists():
                nb = nbformat.read(nb_path, as_version=4)
                print(f'✓ {nb_path} is valid')
        "

  readme-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check README links
      run: |
        # Basic check that key files exist
        test -f README.md || (echo "README.md missing" && exit 1)
        test -f RESULTS.md || (echo "RESULTS.md missing" && exit 1)
        test -f requirements.txt || (echo "requirements.txt missing" && exit 1)
        test -f .env.example || (echo ".env.example missing" && exit 1)
        echo "✓ All required files present"